import { useState, useEffect } from "react";
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from "recharts";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { TrendingUp, TrendingDown, RefreshCw } from "lucide-react";

// âœ… Replace with your actual API URL from ngrok/cloudflared
const API_URL = "https://xyz-1234.ngrok-free.app";

export const StockInvestmentData = () => {
  const { toast } = useToast();
  const [stockData, setStockData] = useState([]);
  const [loading, setLoading] = useState(false);

  // List of stock symbols to track
  const stockSymbols = ["AMAZN", "GOOGLE", "APPL", "TSLA"];

  const fetchPredictions = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/predict`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ symbols: stockSymbols }),
      });
      
      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }
      
      const data = await response.json();

      setStockData(
        stockSymbols.map((symbol, index) => ({
          name: symbol,
          currentPrice: data["LSTM Stock Price Prediction"][index] || 0,
          predictedPrice: data["GRU Stock Price Prediction"][index] || 0,
          confidenceLevel: data["XGBoost Trend Prediction"] === "Up" ? 85 : 60,
          recommendation: data["XGBoost Trend Prediction"] === "Up" ? "Buy" : "Sell"
        }))
      );

      toast({
        title: "Predictions Updated",
        description: `Updated at ${new Date().toLocaleTimeString()}`,
      });
    } catch (error) {
      console.error("Failed to fetch predictions:", error);
      toast({
        title: "Error",
        description: "Failed to fetch prediction data",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    fetchPredictions();
    const intervalId = setInterval(fetchPredictions, 5 * 60 * 1000);
    return () => clearInterval(intervalId);
  }, []);

  return (
    <div className="w-full max-w-4xl mx-auto p-6 rounded-lg border shadow-lg bg-gradient-to-r from-blue-500 to-indigo-600 text-white animate-fade-up">
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-3xl font-bold">ðŸ“ˆ Stock Market Predictions</h2>
        <Button
          variant="outline"
          size="sm"
          onClick={fetchPredictions}
          disabled={loading}
          className="bg-white text-black hover:bg-gray-200"
        >
          <RefreshCw className={`w-4 h-4 mr-2 ${loading ? "animate-spin" : ""}`} />
          {loading ? "Updating..." : "Refresh"}
        </Button>
      </div>

      <div className="h-[300px] mb-6">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={stockData}>
            <CartesianGrid strokeDasharray="3 3" stroke="white" />
            <XAxis dataKey="name" stroke="white" />
            <YAxis stroke="white" />
            <Tooltip contentStyle={{ backgroundColor: "#1E293B", color: "white" }} />
            <Legend />
            <Bar dataKey="Current Price" fill="#22D3EE" />
            <Bar dataKey="Predicted Price" fill="#FBBF24" />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        <div className="p-4 border rounded-lg bg-gray-800">
          <h3 className="text-xl font-semibold mb-4">ðŸ“Š Tomorrow's Stock Predictions</h3>
          <div className="space-y-4">
            {stockData.map((stock) => (
              <div key={stock.name} className="flex justify-between items-center">
                <div>
                  <div className="font-medium text-lg">{stock.name}</div>
                  <div className="text-sm">Current: ${stock.currentPrice.toFixed(2)}</div>
                  <div className="text-sm font-semibold">Predicted: ${stock.predictedPrice.toFixed(2)}</div>
                </div>
                <div className="flex items-center gap-2">
                  <span className={`px-2 py-1 rounded text-sm ${stock.recommendation === "Buy" ? "bg-green-400 text-green-900" : "bg-red-400 text-red-900"}`}>{stock.recommendation}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};
